// <auto-generated />
using System;
using EKSystemApp.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EKSystemApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231101090613_MigEmre003")]
    partial class MigEmre003
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdPublisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdPublishers");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdQuestions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdStatuses");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.EducationLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ExperiencePeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("ExperiencePeriods");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ForignLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("ForignLanguages");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.JobCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.MillitaryStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("MillitaryStatuses");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.PositionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("PositionTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.SkillAndExpertise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("SkillAndExpertises");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("WorkModels");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Eba", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Ebas");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EbaCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("EbaCompanies");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EbaDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("EbaDepartments");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EbaGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("EbaGroups");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EbaUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("EbaUnits");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Locaiton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocaitonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Locaitons");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.TaskType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdwertNumberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Logo")
                        .HasColumnType("int");

                    b.Property<int>("PeriotNumberId")
                        .HasColumnType("int");

                    b.Property<string>("PublicQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkDefination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdvertCreates");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Registry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserCompany", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppUserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("AppUserCompany");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserMenu", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppUserId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("AppUserMenus");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Defination")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4373217a-9434-4a2c-b083-cb4d5011a097"),
                            CompanyName = "Holding"
                        },
                        new
                        {
                            Id = new Guid("903553e9-cc22-42a3-a8c9-e7886de6d18d"),
                            CompanyName = "D&R"
                        },
                        new
                        {
                            Id = new Guid("d6295ddd-28f7-4d91-8943-8ef83303e030"),
                            CompanyName = "D&R Market"
                        });
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HtmlTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouterIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouterLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f818333-9284-46f4-835a-0137873e9a31"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['dashboard']\" routerLinkActive=\"router-link-active\"> <i class=\"la la-home\"></i> Admin Kariyer Giriş</a>  </li></ul>",
                            Name = "Admin Kariyer | Giriş",
                            RouterIcon = "la la-home",
                            RouterLink = "dashboard"
                        },
                        new
                        {
                            Id = new Guid("67d8a5bd-5dc0-443e-ab54-670bfb751729"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['new-adwert-create']\" routerLinkActive=\"router-link-active\"><i class=\"la la-user-tie\"></i>Yeni İlan Oluştur</a>  </li></ul>",
                            Name = "Yeni İlan Oluştur",
                            RouterIcon = "la la-user-tie",
                            RouterLink = "new-adwert-create"
                        },
                        new
                        {
                            Id = new Guid("19f6db9a-6b18-420d-9e62-10acb0f5b9cf"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['adwerts']\" routerLinkActive=\"router-link-active\"><i class=\"la la-paper-plane\"></i>İlanlar</a>  </li></ul>",
                            Name = "İlanlar",
                            RouterIcon = "la la-paper-plane",
                            RouterLink = "adwerts"
                        },
                        new
                        {
                            Id = new Guid("ca250b61-de3f-4fce-a244-d05c84897708"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['on-front-adwert']\" routerLinkActive=\"router-link-active\"><i class=\"la la-briefcase\"></i> Öne Çıkan İlanlar </a>  </li></ul>",
                            Name = "Öne Çıkan İlanlar",
                            RouterIcon = "la la-briefcase",
                            RouterLink = "on-front-adwert"
                        },
                        new
                        {
                            Id = new Guid("1fda59eb-8a8b-4168-92a3-ecd04e1a198f"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['application-candidate-lists']\" routerLinkActive=\"router-link-active\"><i class=\"la la-file-invoice\"></i> Başvuran Aday Listesi </a>  </li></ul>",
                            Name = "Başvuran Aday Listeleri",
                            RouterIcon = "la la-file-invoice",
                            RouterLink = "application-candidate-lists"
                        },
                        new
                        {
                            Id = new Guid("977ffc0e-f328-47fd-b188-6c00d3906937"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['candidate-question-and-answer-lists']\" routerLinkActive=\"router-link-active\"><i class=\"la la-bookmark-o\"></i>Aday Soru/Cevap Listeleri</a>  </li></ul>",
                            Name = "Aday Soru | Cevap Listeleri",
                            RouterIcon = "la la-bookmark-o",
                            RouterLink = "candidate-question-and-answer-lists"
                        },
                        new
                        {
                            Id = new Guid("854cc508-0c0b-4642-b0b7-5b686746659f"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['candidate-pool']\" routerLinkActive=\"router-link-active\"><i class=\"la la-box\"></i>Aday Havuzu</a>  </li></ul>",
                            Name = "Aday Havuzu",
                            RouterIcon = "la la-box",
                            RouterLink = "candidate-pool"
                        },
                        new
                        {
                            Id = new Guid("36380a00-3ea9-4552-97c8-6e4ec0d55316"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['mail-message-manager']\" routerLinkActive=\"router-link-active\"><i class=\"la la-comment-o\"></i>Mail/Mesaj Yönetimi</a>  </li></ul>",
                            Name = "Mail | Mesaj Yönetimi",
                            RouterIcon = "la la-comment-o",
                            RouterLink = "mail-message-manager"
                        },
                        new
                        {
                            Id = new Guid("5707ac45-8f91-486b-8301-8566d0455d09"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['candidate-files']\" routerLinkActive=\"router-link-active\"><i class=\"la la-bell\"></i>Aday Dosyaları</a>  </li></ul>",
                            Name = "Aday Dosyaları",
                            RouterIcon = "la la-bell",
                            RouterLink = "candidate-files"
                        },
                        new
                        {
                            Id = new Guid("2d98a181-6064-4e13-a60f-1bec4c4b67f7"),
                            HtmlTag = "",
                            Name = "Tanımlamalar",
                            RouterIcon = "la la-lock",
                            RouterLink = "navlink dropdown-toggle"
                        },
                        new
                        {
                            Id = new Guid("e3a4ad1a-3cbe-4668-8333-e934f171a1c2"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['skills-and-experties']\" routerLinkActive=\"router-link-active\"><i class=\"la la-user-alt\"></i>Yetenek ve Uzmanlıklar</a>  </li></ul>",
                            Name = "Yetenek ve Uzmanlıklar",
                            RouterIcon = "la la-user-alt",
                            RouterLink = "skills-and-experties"
                        },
                        new
                        {
                            Id = new Guid("68546629-97ce-44da-9067-8b71afc168fc"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['mail-message-template']\" routerLinkActive=\"router-link-active\"><i class=\"la la-sign-out\"></i>Mail/Mesaj Şablonu</a>   </li></ul>",
                            Name = "Mail | Mesaj Şablonu ",
                            RouterIcon = "la la-sign-out",
                            RouterLink = "mail-message-template "
                        },
                        new
                        {
                            Id = new Guid("c59ab410-2283-4d8e-9441-b4eb07604546"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['logo-import-screen']\" routerLinkActive=\"router-link-active\"><i class=\"la la-cloud-upload-alt\"></i>Logo Yükleme Ekranı</a>  </li></ul>",
                            Name = "Logo Yükleme Ekranı",
                            RouterIcon = "la la-cloud-upload-alt",
                            RouterLink = "logo-import-screen"
                        },
                        new
                        {
                            Id = new Guid("a340bddd-090f-4e05-815b-d612aaf53bcb"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['adwert-question-defination']\" routerLinkActive=\"router-link-active\"><i class=\"la la-question\"></i> İlan Soru Tanımlama</a>  </li></ul>",
                            Name = "İlan Soru Tanımlama",
                            RouterIcon = "la la-question",
                            RouterLink = "adwert-question-defination"
                        },
                        new
                        {
                            Id = new Guid("14755374-e019-475b-8ee9-a65cdefce420"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['transfer-requested-posination-name']\" routerLinkActive=\"router-link-active\"><i class=\"la la-exchange-alt\"></i> Talep Edilen Pozisyon Adı Aktar</a>  </li></ul>",
                            Name = "Talep Edilen Pozisyon Adı Aktar",
                            RouterIcon = "la la-exchange-alt",
                            RouterLink = "transfer-requested-posination-name"
                        },
                        new
                        {
                            Id = new Guid("83972263-3a89-4129-9e87-b18f3fee1974"),
                            HtmlTag = "",
                            Name = "Portal | Ana Sayfa İçerik Yönetimi",
                            RouterIcon = "",
                            RouterLink = ""
                        },
                        new
                        {
                            Id = new Guid("e79f3187-d8f0-430a-ae5c-0163997624f0"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['blog-headline-manager']\" routerLinkActive=\"router-link-active\"><i class=\"la la-newspaper\"></i> Blog Manşet Yönetimi </a>  </li></ul>",
                            Name = "Blog Manşet Yönetimi",
                            RouterIcon = "la la-newspaper",
                            RouterLink = "blog-headline-manager"
                        },
                        new
                        {
                            Id = new Guid("5f45b370-4262-41c2-92de-7793efc0a495"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['work-step-manager']\" routerLinkActive=\"router-link-active\"><i class=\"la la-list\"></i>İş Adımları Yönetimi </a>  </li></ul>",
                            Name = "İş Adımları Yönetimi",
                            RouterIcon = "la la-list",
                            RouterLink = "work-step-manager"
                        },
                        new
                        {
                            Id = new Guid("65f3df68-86ef-4eb7-a0d9-2fa1052622e3"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['work-category-manager']\" routerLinkActive=\"router-link-active\"><i class=\"la la-boxes\"></i>İş Kategori Yönetimi </a>  </li></ul>",
                            Name = "İş Kategorileri Yönetimi",
                            RouterIcon = "la la-boxes",
                            RouterLink = "work-category-manager"
                        },
                        new
                        {
                            Id = new Guid("20a9fe95-8617-4cc7-8319-9bbe706cc899"),
                            HtmlTag = "",
                            Name = "Raporlar",
                            RouterIcon = "la la-file-alt",
                            RouterLink = "report"
                        },
                        new
                        {
                            Id = new Guid("9d55c0bd-b7d1-40f0-817c-2682ee9dd4f1"),
                            HtmlTag = "",
                            Name = "Kullanıcı Ayarları",
                            RouterIcon = " ",
                            RouterLink = " "
                        },
                        new
                        {
                            Id = new Guid("eb688cf0-82fe-42f4-afd4-2c6cd423853d"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['auth-defination']\" routerLinkActive=\"router-link-active\"><i class=\"la la-user-plus\"></i>Yetki Tanımlama </a>  </li></ul>",
                            Name = "Yetki Tanımlama",
                            RouterIcon = "la la-user-plus",
                            RouterLink = "auth-defination"
                        },
                        new
                        {
                            Id = new Guid("fc265d3f-1884-432c-ab5e-482764ed3477"),
                            HtmlTag = "<ul class=\"navigation\" ><li><a [routerLink]=\"['role-defination']\" routerLinkActive=\"router-link-active\"><i class=\"la la-plus-circle\"></i>Rol Tanımlama</a>  </li></ul>",
                            Name = "Rol Tanımlama",
                            RouterIcon = "la la-plus-circle",
                            RouterLink = "role-defination"
                        });
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdPublisher", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdPublishers")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdQuestion", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdQuestions")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdStatus", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdStatuses")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.EducationLevel", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("EducationLevels")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ExperiencePeriod", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("ExperiencePeriods")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ForignLanguage", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("ForignLanguages")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.JobCategory", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("JobCategories")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.MillitaryStatus", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("MillitaryStatuses")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.PositionType", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("PositionTypes")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.SkillAndExpertise", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany()
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkModel", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("WorkModels")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkType", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("WorkTypes")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EbaCompany", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("EBACompanies")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EbaDepartment", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", null)
                        .WithMany("Departments")
                        .HasForeignKey("AdvertCreateId");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EbaGroup", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Groups")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EbaUnit", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Units")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Locaiton", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Locaitons")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Organization", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Organizations")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Position", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Positions")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.TaskType", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("TasksTypes")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", "AppRoles")
                        .WithMany("AppUsers")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppRoles");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserCompany", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserCompanies")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.Company", "Company")
                        .WithMany("AppUserCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserMenu", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserMenus")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.Menu", "Menu")
                        .WithMany("AppUserMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Product", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", b =>
                {
                    b.Navigation("AdPublishers");

                    b.Navigation("AdQuestions");

                    b.Navigation("AdStatuses");

                    b.Navigation("Departments");

                    b.Navigation("EBACompanies");

                    b.Navigation("EducationLevels");

                    b.Navigation("ExperiencePeriods");

                    b.Navigation("ForignLanguages");

                    b.Navigation("Groups");

                    b.Navigation("JobCategories");

                    b.Navigation("Locaitons");

                    b.Navigation("MillitaryStatuses");

                    b.Navigation("Organizations");

                    b.Navigation("PositionTypes");

                    b.Navigation("Positions");

                    b.Navigation("TasksTypes");

                    b.Navigation("Units");

                    b.Navigation("WorkModels");

                    b.Navigation("WorkTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppRole", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("AppUserCompanies");

                    b.Navigation("AppUserMenus");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Company", b =>
                {
                    b.Navigation("AppUserCompanies");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Menu", b =>
                {
                    b.Navigation("AppUserMenus");
                });
#pragma warning restore 612, 618
        }
    }
}

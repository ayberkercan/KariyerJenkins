// <auto-generated />
using System;
using EKSystemApp.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EKSystemApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231024065302_MigEmre001")]
    partial class MigEmre001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdPublisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdPublishers");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdQuestions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdStatuses");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.EducationLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ExperiencePeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("ExperiencePeriods");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ForignLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("ForignLanguages");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.JobCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.MillitaryStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("MillitaryStatuses");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.PositionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("PositionTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.SkillAndExpertise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("SkillAndExpertises");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("WorkModels");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EBACompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("EBACompanies");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Eba", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Ebas");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Locaiton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocaitonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Locaitons");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.TaskType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdUnit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdwertNumberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Logo")
                        .HasColumnType("int");

                    b.Property<int>("PeriotNumberId")
                        .HasColumnType("int");

                    b.Property<string>("PublicQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkDefination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdvertCreates");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Registry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserCompany", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppUserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("AppUserCompany");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserMenu", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppUserId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("AppUserMenus");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Defination")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e90bfc30-a120-4ac4-84b5-5afcd89d9749"),
                            CompanyName = "Holding"
                        },
                        new
                        {
                            Id = new Guid("303d1287-5aef-41a7-bd82-91a3c80b1f63"),
                            CompanyName = "D&R"
                        },
                        new
                        {
                            Id = new Guid("30c4095f-7f21-497d-8719-162507d34296"),
                            CompanyName = "D&R Market"
                        });
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouterIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouterLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27fa7e30-abde-4e7f-9df0-1ce51f721e41"),
                            Name = "Admin Kariyer | Giriş",
                            RouterIcon = "la la-home",
                            RouterLink = "dashboard"
                        },
                        new
                        {
                            Id = new Guid("2c94328b-6aa5-401c-93ee-ba2a6310c9ac"),
                            Name = "Yeni İlan Oluştur",
                            RouterIcon = "la la-user-tie",
                            RouterLink = "new-adwert-create"
                        },
                        new
                        {
                            Id = new Guid("945df3f0-104f-424a-9fed-cec893bbe80a"),
                            Name = "İlanlar",
                            RouterIcon = "la la-paper-plane",
                            RouterLink = "adwerts"
                        },
                        new
                        {
                            Id = new Guid("2c027edb-4c89-4ab6-9486-b8739669bc96"),
                            Name = "Öne Çıkan İlanlar",
                            RouterIcon = "la la-briefcase",
                            RouterLink = "on-front-adwert"
                        },
                        new
                        {
                            Id = new Guid("0592a73b-2aff-4cb8-9528-53ffbd328e50"),
                            Name = "Başvuran Aday Listeleri",
                            RouterIcon = "la la-file-invoice",
                            RouterLink = "application-candidate-lists"
                        },
                        new
                        {
                            Id = new Guid("ffe6e61d-68e2-45b8-aaac-482f8fdb0f93"),
                            Name = "Aday Soru | Cevap Listeleri",
                            RouterIcon = "la la-bookmark-o",
                            RouterLink = "candidate-question-and-answer-lists"
                        },
                        new
                        {
                            Id = new Guid("f6c775b8-d54a-41d4-88e0-07f9accdfd06"),
                            Name = "Aday Havuzu",
                            RouterIcon = "la la-box",
                            RouterLink = "candidate-pool"
                        },
                        new
                        {
                            Id = new Guid("66315703-13e6-41c4-b7cd-baafaec72b58"),
                            Name = "Mail | Mesaj Yönetimi",
                            RouterIcon = "la la-comment-o",
                            RouterLink = "mail-message-manager"
                        },
                        new
                        {
                            Id = new Guid("066273c5-c087-4076-80b9-d8e6e7d0f788"),
                            Name = "Aday Dosyaları",
                            RouterIcon = "la la-bell",
                            RouterLink = "candidate-files"
                        },
                        new
                        {
                            Id = new Guid("1429dc6b-40d0-40ce-b91a-3e99ba0b23dc"),
                            Name = "Tanımlamalar",
                            RouterIcon = "la la-lock",
                            RouterLink = "navlink dropdown-toggle"
                        },
                        new
                        {
                            Id = new Guid("2a0f040a-1a54-4bf4-96f6-16dd3db8c24f"),
                            Name = "Yetenek ve Uzmanlıklar",
                            RouterIcon = "la la-user-alt",
                            RouterLink = "skills-and-experties"
                        },
                        new
                        {
                            Id = new Guid("368801c1-de66-40ea-b7c9-a98c6259d23e"),
                            Name = "Mail | Mesaj Şablonu ",
                            RouterIcon = "la la-sign-out",
                            RouterLink = "mail-message-template "
                        },
                        new
                        {
                            Id = new Guid("25c938fa-eb68-4cae-bdbb-a5051cfaac48"),
                            Name = "Logo Yükleme Ekranı",
                            RouterIcon = "la la-cloud-upload-alt",
                            RouterLink = "logo-import-screen"
                        },
                        new
                        {
                            Id = new Guid("6badd5da-3324-4607-9ade-4080796b03b2"),
                            Name = "İlan Soru Tanımlama",
                            RouterIcon = "la la-question",
                            RouterLink = "adwert-question-defination"
                        },
                        new
                        {
                            Id = new Guid("46228b08-f18c-456b-901f-b473dd7f8ebe"),
                            Name = "Talep Edilen Pozisyon Adı Aktar",
                            RouterIcon = "la la-exchange-alt",
                            RouterLink = "transfer-requested-posination-name"
                        },
                        new
                        {
                            Id = new Guid("2d832f97-c6b7-400b-a112-7f6551f9ba13"),
                            Name = "Portal | Ana Sayfa İçerik Yönetimi",
                            RouterIcon = "",
                            RouterLink = ""
                        },
                        new
                        {
                            Id = new Guid("ebea91fc-88bc-48c0-816f-3ad639794ed8"),
                            Name = "Blog Manşet Yönetimi",
                            RouterIcon = "la la-newspaper",
                            RouterLink = "blog-headline-manager"
                        },
                        new
                        {
                            Id = new Guid("69fc457e-6a5a-4f2d-b282-2de7cbfd0661"),
                            Name = "İş Adımları Yönetimi",
                            RouterIcon = "la la-list",
                            RouterLink = "work-step-manager"
                        },
                        new
                        {
                            Id = new Guid("6fab4c60-b255-4f25-a7b5-f4093aa32c5a"),
                            Name = "İş Kategorileri Yönetimi",
                            RouterIcon = "la la-boxes",
                            RouterLink = "work-category-manager"
                        },
                        new
                        {
                            Id = new Guid("617c58fc-f39e-4c92-8092-28b0b4034088"),
                            Name = "Raporlar",
                            RouterIcon = "la la-file-alt",
                            RouterLink = "report"
                        },
                        new
                        {
                            Id = new Guid("cfb6e970-6692-44a0-9f9b-acda647d88b9"),
                            Name = "Kullanıcı Ayarları",
                            RouterIcon = " ",
                            RouterLink = " "
                        },
                        new
                        {
                            Id = new Guid("dfd7deff-039a-49fc-b978-034b3432ac75"),
                            Name = "Yetki Tanımlama",
                            RouterIcon = "la la-user-plus",
                            RouterLink = "auth-defination"
                        },
                        new
                        {
                            Id = new Guid("06f05193-0d74-4089-b66f-8700d1341733"),
                            Name = "Rol Tanımlama",
                            RouterIcon = "la la-plus-circle",
                            RouterLink = "role-defination"
                        });
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdPublisher", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdPublishers")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdQuestion", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdQuestions")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdStatus", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdStatuses")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.EducationLevel", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("EducationLevels")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ExperiencePeriod", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("ExperiencePeriods")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ForignLanguage", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("ForignLanguages")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.JobCategory", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("JobCategories")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.MillitaryStatus", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("MillitaryStatuses")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.PositionType", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("PositionTypes")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.SkillAndExpertise", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany()
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkModel", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("WorkModels")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkType", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("WorkTypes")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Department", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", null)
                        .WithMany("Departments")
                        .HasForeignKey("AdvertCreateId");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EBACompany", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("EBACompanies")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Group", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Groups")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Locaiton", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Locaitons")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Organization", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Organizations")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Position", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Positions")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.TaskType", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("TasksTypes")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Unit", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Units")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", "AppRoles")
                        .WithMany("AppUsers")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppRoles");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserCompany", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserCompanies")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.Company", "Company")
                        .WithMany("AppUserCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserMenu", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserMenus")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.Menu", "Menu")
                        .WithMany("AppUserMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Product", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", b =>
                {
                    b.Navigation("AdPublishers");

                    b.Navigation("AdQuestions");

                    b.Navigation("AdStatuses");

                    b.Navigation("Departments");

                    b.Navigation("EBACompanies");

                    b.Navigation("EducationLevels");

                    b.Navigation("ExperiencePeriods");

                    b.Navigation("ForignLanguages");

                    b.Navigation("Groups");

                    b.Navigation("JobCategories");

                    b.Navigation("Locaitons");

                    b.Navigation("MillitaryStatuses");

                    b.Navigation("Organizations");

                    b.Navigation("PositionTypes");

                    b.Navigation("Positions");

                    b.Navigation("TasksTypes");

                    b.Navigation("Units");

                    b.Navigation("WorkModels");

                    b.Navigation("WorkTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppRole", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("AppUserCompanies");

                    b.Navigation("AppUserMenus");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Company", b =>
                {
                    b.Navigation("AppUserCompanies");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Menu", b =>
                {
                    b.Navigation("AppUserMenus");
                });
#pragma warning restore 612, 618
        }
    }
}

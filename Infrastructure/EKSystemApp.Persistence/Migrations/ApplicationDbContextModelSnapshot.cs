// <auto-generated />
using System;
using EKSystemApp.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EKSystemApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdPublisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdPublisherKey")
                        .HasColumnType("text");

                    b.Property<string>("AdPublisherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdPublishers");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertAdQuestionAnswerContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdvertAdQuestionsId")
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerContentKey")
                        .HasColumnType("text");

                    b.Property<string>("AnswerContentName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertAdQuestionsId");

                    b.ToTable("AdvertAdQuestionAnswerContent");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertAdQuestions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdQuestionKey")
                        .HasColumnType("text");

                    b.Property<string>("AdQuestionName")
                        .HasColumnType("text");

                    b.Property<Guid?>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerContentDefination")
                        .HasColumnType("text");

                    b.Property<string>("AnswerType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdvertAdQuestions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertForeignLanguages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("ForeignLanguageKey")
                        .HasColumnType("text");

                    b.Property<string>("ForeignLanguageLevels")
                        .HasColumnType("text");

                    b.Property<string>("ForeignLanguageName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdvertForeignLanguages");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertSkillAndExpertises", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillAndExpertiseKey")
                        .HasColumnType("text");

                    b.Property<string>("SkillAndExpertiseName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdvertSkillAndExpertises");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("AdvertStatusKey")
                        .HasColumnType("text");

                    b.Property<string>("AdvertStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdvertStatuses");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("BrandKey")
                        .HasColumnType("text");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("DepartmentKey")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.EducationLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("EducationLevelKey")
                        .HasColumnType("text");

                    b.Property<string>("EducationLevelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ExperiencePeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExperiencePeriodKey")
                        .HasColumnType("text");

                    b.Property<string>("ExperiencePeriodName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("ExperiencePeriods");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("GroupKey")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("LocationKey")
                        .HasColumnType("text");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Logo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Logos");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.MillitaryStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("MillitaryStatusKey")
                        .HasColumnType("text");

                    b.Property<string>("MillitaryStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("MillitaryStatuses");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationKey")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("PositionKey")
                        .HasColumnType("text");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.PositionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("PositionTypeKey")
                        .HasColumnType("text");

                    b.Property<string>("PositionTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("PositionTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnitKey")
                        .HasColumnType("text");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkCategoryKey")
                        .HasColumnType("text");

                    b.Property<string>("WorkCategoryName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("WorkCategories");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkModelKey")
                        .HasColumnType("text");

                    b.Property<string>("WorkModelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("WorkModels");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkTypeKey")
                        .HasColumnType("text");

                    b.Property<string>("WorkTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Blog.BlogHeadlineManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("BlogPublicStatu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BlogTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeadlinePublicStatu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkHeadline")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublicationEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PublicationPage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("BlogHeadlineManagers");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ProfessionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.MailMesaj.MailMessageTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageScope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageSubject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("OpenClosed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("MailMessageTemplate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AdvertNumberId")
                        .HasColumnType("integer");

                    b.Property<string>("AdvertPublisherName")
                        .HasColumnType("text");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("EbaProcessId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PeriotNumberId")
                        .HasColumnType("integer");

                    b.Property<string>("ProcessNumber")
                        .HasColumnType("text");

                    b.Property<string>("PublicQuality")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WorkDefination")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AdvertCreates");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.WorkStepManager.WorksStepManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Defination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkSteps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkStepsTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("WorksStepManagers");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("AppRoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Registry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserCompany", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("AppUserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("AppUserCompany");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserItem", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.HasKey("AppUserId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("AppUserItems");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserMenu", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.HasKey("AppUserId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("AppUserMenus");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Defination")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fcd9b5fc-9ed2-4cea-960a-9c78b5748a7e"),
                            CompanyName = "Holding"
                        },
                        new
                        {
                            Id = new Guid("41988532-57ca-48a8-b48a-00bc8aba4d9a"),
                            CompanyName = "D&R"
                        },
                        new
                        {
                            Id = new Guid("6198ef0d-e177-4fd3-ab97-11c4422a5c34"),
                            CompanyName = "D&R Market"
                        });
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.CompanyKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompaniesKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyKeys");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.File.FormFiles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormFiles");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Items", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("KeyId")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("RouterLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("queryParams")
                        .HasColumnType("boolean");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("KeyId")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouterLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.UI.SavedFilters.SavedFiltersOfApprovedCandidateList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdvertNumberId")
                        .HasColumnType("text");

                    b.Property<string>("BackedUpCaption")
                        .HasColumnType("text");

                    b.Property<string>("CandidateStatus")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DrivingLicenseName")
                        .HasColumnType("text");

                    b.Property<string>("EducationDepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("EducationLevelName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExperienceTotalRange")
                        .HasColumnType("text");

                    b.Property<string>("ExperiencedDepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("ExperiencedProfessionName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignLanguageLevelName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignLanguageName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PositionName")
                        .HasColumnType("text");

                    b.Property<string>("PositionTypeName")
                        .HasColumnType("text");

                    b.Property<string>("ProvinceName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SavedFiltersOfApprovedCandidateList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertAdQuestionAnswerContent", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertAdQuestions", "AdvertAdQuestions")
                        .WithMany("AnswerContent")
                        .HasForeignKey("AdvertAdQuestionsId");

                    b.Navigation("AdvertAdQuestions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertAdQuestions", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdvertAdQuestions")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertForeignLanguages", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdvertForeignLanguages")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertSkillAndExpertises", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdvertSkillAndExpertises")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertStatus", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdvertStatuses")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Brand", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Brands")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Department", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Departments")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.EducationLevel", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("EducationLevels")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ExperiencePeriod", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("ExperiencePeriods")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Group", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Groups")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Location", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Locations")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Logo", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Logos")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.MillitaryStatus", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("MillitaryStatuses")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Organization", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Organizations")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Position", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Positions")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.PositionType", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("PositionTypes")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.Unit", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Units")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkCategory", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("WorkCategories")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkModel", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("WorkModels")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkType", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("WorkTypes")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Blog.BlogHeadlineManager", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.MailMesaj.MailMessageTemplate", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("MailMessageTemplates")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AdvertCreates")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.WorkStepManager.WorksStepManager", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("WorksStepManagers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", "AppRoles")
                        .WithMany("AppUsers")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppRoles");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserCompany", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserCompanies")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.Company", "Company")
                        .WithMany("AppUserCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserItem", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserItems")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.Items", "Items")
                        .WithMany("AppUserItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserMenu", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserMenus")
                        .HasForeignKey("AppUserId")
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.Menu", "Menu")
                        .WithMany("AppUserMenus")
                        .HasForeignKey("MenuId")
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.CompanyKey", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Company", "Company")
                        .WithMany("CompaniesKeys")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Items", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Product", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdvertAdQuestions", b =>
                {
                    b.Navigation("AnswerContent");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", b =>
                {
                    b.Navigation("AdvertAdQuestions");

                    b.Navigation("AdvertForeignLanguages");

                    b.Navigation("AdvertSkillAndExpertises");

                    b.Navigation("AdvertStatuses");

                    b.Navigation("Brands");

                    b.Navigation("Departments");

                    b.Navigation("EducationLevels");

                    b.Navigation("ExperiencePeriods");

                    b.Navigation("Groups");

                    b.Navigation("Locations");

                    b.Navigation("Logos");

                    b.Navigation("MillitaryStatuses");

                    b.Navigation("Organizations");

                    b.Navigation("PositionTypes");

                    b.Navigation("Positions");

                    b.Navigation("Units");

                    b.Navigation("WorkCategories");

                    b.Navigation("WorkModels");

                    b.Navigation("WorkTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppRole", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("AdvertCreates");

                    b.Navigation("AppUserCompanies");

                    b.Navigation("AppUserItems");

                    b.Navigation("AppUserMenus");

                    b.Navigation("MailMessageTemplates");

                    b.Navigation("WorksStepManagers");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Company", b =>
                {
                    b.Navigation("AppUserCompanies");

                    b.Navigation("CompaniesKeys");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Items", b =>
                {
                    b.Navigation("AppUserItems");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Menu", b =>
                {
                    b.Navigation("AppUserMenus");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}

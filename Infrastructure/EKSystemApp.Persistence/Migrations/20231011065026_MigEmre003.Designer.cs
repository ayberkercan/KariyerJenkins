// <auto-generated />
using System;
using EKSystemApp.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EKSystemApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231011065026_MigEmre003")]
    partial class MigEmre003
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdPublisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdPublishers");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdQuestions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("AdStatuses");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.EducationLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ExperiencePeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("ExperiencePeriods");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ForignLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("ForignLanguages");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.JobCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.MillitaryStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("MillitaryStatuses");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.PositionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("PositionTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.SkillAndExpertise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("SkillAndExpertises");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("WorkModels");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EBACompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("EBACompanies");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Eba", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Ebas");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Locaiton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocaitonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Locaitons");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.TaskType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvertCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdUnit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvertCreateId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdwertNumberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Logo")
                        .HasColumnType("int");

                    b.Property<int>("PeriotNumberId")
                        .HasColumnType("int");

                    b.Property<string>("PublicQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkDefination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdvertCreates");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Registry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserCompany", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppUserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("AppUserCompany");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserMenu", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppUserId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("AppUserMenus");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Defination")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a4d05a4-a357-417b-abba-0b7948d7ece3"),
                            CompanyName = "Holding"
                        },
                        new
                        {
                            Id = new Guid("66b1e9ce-cc87-4711-a661-02fd2b6025a9"),
                            CompanyName = "D&R"
                        },
                        new
                        {
                            Id = new Guid("06efa92f-41cb-469a-983a-582d7abef858"),
                            CompanyName = "D&R Market"
                        });
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3351a39-3ba3-4972-b469-b961e8ed28d7"),
                            Name = "Admin Kariyer | Giriş"
                        },
                        new
                        {
                            Id = new Guid("fda69419-8c5f-4fd1-83d2-3c3cd35eb444"),
                            Name = "Yeni İlan Oluştur"
                        },
                        new
                        {
                            Id = new Guid("cd366272-b515-4358-aed8-ed4b3953cc4d"),
                            Name = "İlanlar"
                        },
                        new
                        {
                            Id = new Guid("b7575648-0673-46ec-af38-488fd0440266"),
                            Name = "Öne Çıkan İlanlar"
                        },
                        new
                        {
                            Id = new Guid("8b247b65-5352-475a-9e99-19a0891ce26d"),
                            Name = "Başvuran Aday Listeleri"
                        },
                        new
                        {
                            Id = new Guid("b28c2b90-45e0-4c5e-9e6c-6a2c062a1a7c"),
                            Name = "Aday Soru | Cevap Listeleri"
                        },
                        new
                        {
                            Id = new Guid("4dcde5f3-2616-4c21-9075-f4a19a923af0"),
                            Name = "Aday Havuzu"
                        },
                        new
                        {
                            Id = new Guid("b9e9b750-ba0a-4d7b-87c3-0e27d7255a14"),
                            Name = "Mail | Mesaj Yönetimi"
                        },
                        new
                        {
                            Id = new Guid("7b515d9c-72db-42b5-a08d-1a22c3d31bb8"),
                            Name = "Aday Dosyaları"
                        },
                        new
                        {
                            Id = new Guid("9af1e7cd-d585-47e0-9611-4041eccdb17a"),
                            Name = "Tanımlamalar"
                        },
                        new
                        {
                            Id = new Guid("ad738fec-3215-462b-a7b4-d189e5f016c5"),
                            Name = "Yetenek ve Uzmanlıklar"
                        },
                        new
                        {
                            Id = new Guid("0bb1fcfa-3e4a-48ec-9619-2a91980c5035"),
                            Name = "Mail | Mesaj Şablonu "
                        },
                        new
                        {
                            Id = new Guid("82d85766-9184-4c5b-b05d-46ae72bbe3a8"),
                            Name = "Logo Yükleme Ekranı"
                        },
                        new
                        {
                            Id = new Guid("7b4f9e11-f4ae-45a0-90ce-fdf21505beab"),
                            Name = "İlan Soru Tanımlama"
                        },
                        new
                        {
                            Id = new Guid("b0cb7a69-3b3e-4d5e-b0bf-cd00217fe343"),
                            Name = "Talep Edilen Pozisyon Adı Aktar"
                        },
                        new
                        {
                            Id = new Guid("f9862a97-5f8c-4cad-99e7-cc5aef0756d2"),
                            Name = "Portal | Ana Sayfa İçerik Yönetimi"
                        },
                        new
                        {
                            Id = new Guid("2f71624e-e967-4bd4-a97f-1a0e6efc58eb"),
                            Name = "Blog Manşet Yönetimi"
                        },
                        new
                        {
                            Id = new Guid("4a09644d-7709-44f8-9cb6-6aa118e632de"),
                            Name = "İş Adımları Yönetimi"
                        },
                        new
                        {
                            Id = new Guid("fb9d0df7-2ace-43c4-92d8-123ee4e897cf"),
                            Name = "İş Kategorileri Yönetimi"
                        },
                        new
                        {
                            Id = new Guid("aea078e4-a426-4e49-a50d-c85168132ddd"),
                            Name = "Raporlar"
                        },
                        new
                        {
                            Id = new Guid("b959ea2b-ad61-47e5-ba9b-e536e41983f9"),
                            Name = "Kullanıcı Ayarları"
                        },
                        new
                        {
                            Id = new Guid("80718712-49b5-4fb1-bb74-98446b9f243d"),
                            Name = "Yetki Tanımlama"
                        },
                        new
                        {
                            Id = new Guid("34777ed8-fbec-45ce-9927-9a2193a827fa"),
                            Name = "Rol Tanımlama"
                        });
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdPublisher", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdPublishers")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdQuestion", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdQuestions")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.AdStatus", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("AdStatuses")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.EducationLevel", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("EducationLevels")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ExperiencePeriod", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("ExperiencePeriods")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.ForignLanguage", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("ForignLanguages")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.JobCategory", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("JobCategories")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.MillitaryStatus", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("MillitaryStatuses")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.PositionType", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("PositionTypes")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.SkillAndExpertise", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany()
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkModel", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("WorkModels")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.AdminBaseEntity.WorkType", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("WorkTypes")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Department", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", null)
                        .WithMany("Departments")
                        .HasForeignKey("AdvertCreateId");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.EBACompany", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("EBACompanies")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Group", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Groups")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Locaiton", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Locaitons")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Organization", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Organizations")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Position", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Positions")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.TaskType", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("TasksTypes")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.Eba.Unit", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", "AdvertCreate")
                        .WithMany("Units")
                        .HasForeignKey("AdvertCreateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvertCreate");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", "AppRoles")
                        .WithMany("AppUsers")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppRoles");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserCompany", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserCompanies")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.Company", "Company")
                        .WithMany("AppUserCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUserMenu", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserMenus")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.Menu", "Menu")
                        .WithMany("AppUserMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Product", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EKSystemApp.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Admin.NewAdvertCreated.AdvertCreate", b =>
                {
                    b.Navigation("AdPublishers");

                    b.Navigation("AdQuestions");

                    b.Navigation("AdStatuses");

                    b.Navigation("Departments");

                    b.Navigation("EBACompanies");

                    b.Navigation("EducationLevels");

                    b.Navigation("ExperiencePeriods");

                    b.Navigation("ForignLanguages");

                    b.Navigation("Groups");

                    b.Navigation("JobCategories");

                    b.Navigation("Locaitons");

                    b.Navigation("MillitaryStatuses");

                    b.Navigation("Organizations");

                    b.Navigation("PositionTypes");

                    b.Navigation("Positions");

                    b.Navigation("TasksTypes");

                    b.Navigation("Units");

                    b.Navigation("WorkModels");

                    b.Navigation("WorkTypes");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppRole", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("AppUserCompanies");

                    b.Navigation("AppUserMenus");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Company", b =>
                {
                    b.Navigation("AppUserCompanies");
                });

            modelBuilder.Entity("EKSystemApp.Domain.Entities.Menu", b =>
                {
                    b.Navigation("AppUserMenus");
                });
#pragma warning restore 612, 618
        }
    }
}
